---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
type: Opaque
stringData:
  database_url: postgres://user:password@postgres:5432/mydb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  log_level: 'info'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  api_url: 'http://backend-service:8080'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    server {
      listen 80;
      server_name localhost;

      location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
      }

      location /api/ {
        proxy_pass http://backend-service:8080/;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: hashicorp/http-echo
          envFrom:
            - secretRef:
                name: backend-secret
            - configMapRef:
                name: backend-config
          args:
            - '-text=hello from backend'
            - '-listen=:8080'
          ports:
            - containerPort: 8080
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              memory: '25Mi'
              cpu: '25m'
            limits:
              memory: '50Mi'
              cpu: '50m'
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: nginx:alpine-slim
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
          resources:
            requests:
              memory: '25Mi'
              cpu: '25m'
            limits:
              memory: '50Mi'
              cpu: '50m'
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-policy
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-policy
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend # Allow traffic from backend
      ports:
        - protocol: TCP
          port: 80
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-app-quota
spec:
  hard:
    requests.cpu: '100m'
    requests.memory: '100Mi'
    limits.cpu: '200m'
    limits.memory: '200Mi'
    pods: '4'
    services: '2'
---
apiVersion: v1
kind: LimitRange
metadata:
  name: demo-app-limits
spec:
  limits:
    - type: Container
      default:
        cpu: 50m
        memory: 50Mi
      defaultRequest:
        cpu: 25m
        memory: 25Mi
      max:
        cpu: 50m
        memory: 50Mi
      min:
        cpu: 25m
        memory: 25Mi
