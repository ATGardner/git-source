# https://www.figma.com/board/gsYgTfa4W7xaPvJMsogcFX/product-release-statuses?node-id=0-1&t=IKIQs3WIc7YrY9lB-0
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: custom-wrapper
spec:
  serviceAccountName: promotion-template
  hooks:
    exit:
      template: argocd-get-global-tmpl
      arguments:
        parameters:
        - name: ARGOCD_SERVER
          value: "{{ workflow.parameters.ARGOCD_SERVER }}"
        - name: APP_NAME
          value: "{{ workflow.parameters.APP_NAME }}"
        - name: TOKEN_SECRET
          value: argocd-token
        - name: TOKEN_SECRET_KEY
          value: token
  entrypoint: promotion
  arguments:
    parameters:
    - name: RUNTIME # ???
    - name: APP_NAMESPACE # ???
    - name: APP_NAME
    - name: ARGOCD_SERVER
    - name: POST_ACTION_ONLY
      value: "false"
    - name: ACTION_URL
      value: ""
    - name: ACTION_BODY
      value: ""
    - name: PRE_ACTION_TMPL
      value: ""
    - name: POST_ACTION_TMPL
      value: ""
    - name: ARGS
      value: ""
    - name: LABELS
      value: ""
  templates:
  - name: promotion
    inputs:
      parameters:
      - name: APP_NAMESPACE
      - name: APP_NAME
      - name: ARGOCD_SERVER
      - name: POST_ACTION_ONLY
      - name: ACTION_URL
      - name: ACTION_BODY
      - name: PRE_ACTION_TMPL
      - name: POST_ACTION_TMPL
      - name: ARGS
      - name: LABELS
    dag:
      tasks:
      - name: terminate-running-promotions
        template: terminate-workflow-tmpl

      - name: run-action
        depends: "terminate-running-promotions"
        when: "{{= inputs.parameters.POST_ACTION_ONLY != 'true' }}" # expr in when
        template: action-dag-tmpl
        arguments:
          parameters:
          - name: ACTION_URL
            value: "{{ inputs.parameters.ACTION_URL }}"
          - name: ACTION_BODY
            value: "{{ inputs.parameters.ACTION_BODY }}"
          - name: PRE_ACTION_TMPL
            value: "{{ inputs.parameters.PRE_ACTION_TMPL }}"
          - name: ARGS
            value: "{{ inputs.parameters.ARGS }}"
          - name: LABELS
            value: "{{ inputs.parameters.LABELS }}"

      - name: run-sync
        depends: "run-action.Succeeded"
        template: sync-app-tmpl
        arguments:
          parameters:
          - name: APP_NAME
            value: "{{ inputs.parameters.APP_NAME }}"
          - name: ARGOCD_SERVER
            value: "{{ inputs.parameters.ARGOCD_SERVER }}"      

      - name: post-action
        depends: "run-action.Skipped || run-sync"
        when: "{{= inputs.parameters.POST_ACTION_TMPL != '' }}" # expr in when
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{ inputs.parameters.POST_ACTION_TMPL }}"
          - name: LABELS
            value: "codefresh.io/promotion-stage=post-action,{{ inputs.parameters.LABELS }}"
          artifacts:
          - name: ARGS
            raw:
              data: >- # expr in arguments/artifacts
                {{= tasks["run-action"].status == "Skipped"
                  ? inputs.parameters.ARGS
                  : tasks["run-action"].outputs.parameters.RESULT }}

      - name: final-wait-app
        depends: "post-action"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{ inputs.parameters.ARGOCD_SERVER }}"
          - name: APP_NAME
            value: "{{ inputs.parameters.APP_NAME }}"
          - name: FLAGS
            value: --health --sync --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

  - name: action-dag-tmpl
    inputs:
      parameters:
      - name: ACTION_URL
        default: ""
      - name: ACTION_BODY
        default: ""
      - name: PRE_ACTION_TMPL
        default: ""
      - name: ARGS
      - name: LABELS
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          expression: "tasks['merge-args'].outputs.result"
    dag:
      tasks:
      - name: pre-action
        when: "{{= inputs.parameters.PRE_ACTION_TMPL != '' }}"
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{ inputs.parameters.PRE_ACTION_TMPL }}"
          - name: LABELS
            value: "codefresh.io/promotion-stage=pre-action,{{ inputs.parameters.LABELS }}"
          artifacts:
          - name: ARGS
            raw:
              data: "{{ inputs.parameters.ARGS }}"

      - name: action
        when: "{{= inputs.parameters.ACTION_URL != '' }}" # expr in when
        depends: "pre-action"
        template: action-tmpl
        arguments:
          parameters:
          - name: URL
            value: "{{ inputs.parameters.ACTION_URL }}"
          artifacts:
          - name: BODY
            raw:
              data: "{{ inputs.parameters.ACTION_BODY }}"

      - name: fail-if-skipped
        depends: "pre-action.Skipped && action.Skipped"
        template: fail-tmpl

      - name: merge-args
        depends: "action"
        template: merge-args-tmpl
        arguments:
          artifacts:
          - name: ARGS
            raw:
              data: "{{ inputs.parameters.ARGS }}"
          - name: PRE_ACTION_RESULT
            raw:
              data: >- # expr in arguments/artifacts
                {{= (tasks["pre-action"].status == "Succeeded" && "outputs" in jsonpath(tasks["pre-action"].outputs.parameters.RESULT, "$.status") && "parameters" in jsonpath(tasks["pre-action"].outputs.parameters.RESULT, "$.status.outputs"))
                  ? toJson(jsonpath(tasks["pre-action"].outputs.parameters.RESULT, "$.status.outputs.parameters"))
                  : '[]' }}
          - name: ACTION_RESULT
            raw:
              data: >- # expr in arguments/artifacts
                {{= tasks.action.status == 'Succeeded'
                  ? tasks.action.outputs.parameters.RESPONSE
                  : '{}' }}

      - name: suspend
        when: "{{= len(workflow.outputs?.parameters?.COMMIT_SHA ?? '') > 0 || len(workflow.outputs?.parameters?.PR_URL ?? '') > 0 }}"
        depends: "action"
        template: suspend-tmpl

  - name: sync-app-tmpl
    inputs:
      parameters:
      - name: APP_NAME
      - name: ARGOCD_SERVER
    dag:
      tasks:
      - name: get-app
        template: argocd-get-tmpl
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{ inputs.parameters.ARGOCD_SERVER }}"
          - name: APP_NAME
            value: "{{ inputs.parameters.APP_NAME }}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token

      - name: sync-app
        depends: "get-app"
        when: "{{= !('syncPolicy' in jsonpath(tasks['get-app'].outputs.parameters.RESULT, '$.spec') && 'automated' in jsonpath(tasks['get-app'].outputs.parameters.RESULT, '$.spec.syncPolicy')) && jsonpath(tasks['get-app'].outputs.parameters.RESULT, '$.status.sync.status') == 'OutOfSync' }}"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{ inputs.parameters.ARGOCD_SERVER }}"
          - name: APP_NAME
            value: "{{ inputs.parameters.APP_NAME }}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-sync-tmpl

      - name: wait-app
        depends: "sync-app.Succeeded"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{ inputs.parameters.ARGOCD_SERVER }}"
          - name: APP_NAME
            value: "{{ inputs.parameters.APP_NAME }}"
          - name: FLAGS
            value: --health --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

  - name: submit-workflow-tmpl
    inputs:
      parameters:
      - name: TEMPLATE_NAME
      - name: LABELS
      artifacts:
      - name: ARGS
        path: /tmp/args.json
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          path: /tmp/result.json
      - name: CREATION_FAILED
        valueFrom:
          path: /tmp/submit.stderr
    script:
      name: submit
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      env:
      - name: TEMPLATE_NAME
        value: "{{ inputs.parameters.TEMPLATE_NAME }}"
      - name: LABELS
        value: "{{ inputs.parameters.LABELS }}"
      - name: PARENT_UID
        value: "{{ workflow.uid }}"
      - name: APP_NAME_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/app-name }}"
      - name: APP_NAMESPACE_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/app-namespace }}"
      - name: RELEASE_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/release }}"
      command:
      - sh
      source: |
        LABELS="codefresh.io/workflow-origin="promotion",codefresh.io/submit-wf-parent-uid=${PARENT_UID},codefresh.io/app-name=${APP_NAME_LABEL},codefresh.io/app-namespace=${APP_NAMESPACE_LABEL},codefresh.io/release=${RELEASE_LABEL},{{ inputs.parameters.LABELS }}"
        echo "Labels: ${LABELS}"
        set -o pipefail
        WORKFLOW_NAME=$(argo submit \
          --from wftmpl/${TEMPLATE_NAME} \
          --parameter-file /tmp/args.json \
          --labels ${LABELS} \
          --wait \
          --output name 2> /tmp/submit.stderr)
        echo ${WORKFLOW_NAME}
        >&2 cat /tmp/submit.stderr

        EXIT_CODE=$?
        if [[ ${EXIT_CODE} -ne 0 ]]; then
          exit ${EXIT_CODE}
        fi

        argo get ${WORKFLOW_NAME} --output json > /tmp/result.json

  - name: terminate-workflow-tmpl
    script:
      name: main
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      env:
      - name: APP_NAME_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/app-name }}"
      - name: APP_NAMESPACE_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/app-namespace }}"
      - name: RELEASE_LABEL
        value: "{{ workflow.labels.codefresh\u002eio/release }}"
      command:
      - sh
      source: |
        SELECTOR="codefresh.io/app-name==${APP_NAME_LABEL},codefresh.io/app-namespace==${APP_NAMESPACE_LABEL},codefresh.io/release!=${RELEASE_LABEL},workflows.argoproj.io/phase!=Succeeded,workflows.argoproj.io/phase!=Failed,workflows.argoproj.io/phase!=Error"
        echo "selector: ${SELECTOR}"
        argo terminate --selector "${SELECTOR}"

  - name: action-tmpl
    inputs:
      parameters:
      - name: URL
      - name: TOKEN_SECRET
        default: codefresh-token
      - name: TOKEN_SECRET_KEY
        default: token
      artifacts:
      - name: BODY
        path: /tmp/body.json
    outputs:
      parameters:
      - name: RESPONSE
        valueFrom:
          path: /tmp/response.json
      - name: PR_URL
        globalName: PR_URL
        valueFrom:
          path: /tmp/pr_url
      - name: COMMIT_SHA
        globalName: COMMIT_SHA
        valueFrom:
          path: /tmp/commit_sha
    script:
      name: curl
      image: quay.io/codefresh/curl-base:8.9.1
      env:
      - name: URL
        value: "{{ inputs.parameters.URL }}"
      - name: TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.TOKEN_SECRET }}"
            key: "{{ inputs.parameters.TOKEN_SECRET_KEY }}"
      command:
      - sh
      source: |
        echo "" > /tmp/response.json
        echo "" > /tmp/commit_sha
        echo "" > /tmp/pr_url
        STATUS_CODE=$(curl ${URL} \
          --header "Content-Type: application/json" \
          --header "Authorization: ${TOKEN}" \
          --data @/tmp/body.json \
          --silent \
          --output /tmp/orig_response.json \
          --write-out "%{http_code}")
        EXIT_CODE=$?
        echo "EXIT_CODE = ${EXIT_CODE}"
        echo "STATUS_CODE = ${STATUS_CODE}"
        if [[ ${EXIT_CODE} -ne 0 ]]; then
          echo "curl command failed!"
          exit ${EXIT_CODE}
        fi

        if [[ $STATUS_CODE == 000 ]]; then
          echo "error sending request to app-proxy"
          exit 1
        fi

        echo "response.json:"
        cat /tmp/orig_response.json
        echo ""
        if [[ $STATUS_CODE -ge 300 ]]; then
          ERROR=$(jq -r '. | select(.error) | .error' /tmp/orig_response.json)
          echo "ERROR = ${ERROR}"

          mv /tmp/orig_response.json /tmp/response.json
          if [[ "${ERROR}" == "NO_CHANGES" ]]; then
            echo "no changes between environments, resuming promotion"
            exit 0
          fi

          echo "error performing action in app-proxy, ERROR: ${ERROR}"
          exit $STATUS_CODE
        fi

        GQL_ERROR=$(jq -r '.errors[0].extensions' /tmp/orig_response.json)
        if [[ -n "${GQL_ERROR}" && "${GQL_ERROR}" != "null" ]]; then
          mv /tmp/orig_response.json /tmp/response.json
          if [[ "${GQL_ERROR}" == "EMPTY_COMMIT_EXCEPTION" ]]; then
            echo "no changes between environments, resuming promotion"
            exit 0
          fi

          echo "error performing action in app-proxy, GQL_ERROR: ${GQL_ERROR}"
          exit 1
        fi

        PR_URL=$(jq -r '.url, .data.createPromotionPullRequest.url | select(. != null)' /tmp/orig_response.json)
        echo "PR_URL = ${PR_URL}"
        echo ${PR_URL} > /tmp/pr_url

        COMMIT_SHA=$(jq -r '.sha, .data.commitFiles.sha | select(. != null)' /tmp/orig_response.json)
        echo "COMMIT_SHA = ${COMMIT_SHA}"
        echo $COMMIT_SHA > /tmp/commit_sha

        jq -c 'if .data.commitFiles then .data.commitFiles else . end | if .sha then {
          COMMIT_SHA: .sha,
          COMMIT_AUTHOR: (if .committer.email then .committer.name + " <" + .committer.email + ">" else .committer.name end),
          COMMIT_DATE: .date,
          COMMIT_MESSAGE: .message
        } else . end' /tmp/orig_response.json > /tmp/response.json

  - name: merge-args-tmpl
    inputs:
      artifacts:
      - name: ARGS
        path: /tmp/args.json
      - name: PRE_ACTION_RESULT
        path: /tmp/pre_action_result.json
      - name: ACTION_RESULT
        path: /tmp/action_result.json
    container:
      image: ghcr.io/jqlang/jq:1.7.1
      args:
      - --slurp
      - '.[0] + (.[1] | from_entries) + .[2]'
      - /tmp/args.json
      - /tmp/pre_action_result.json
      - /tmp/action_result.json
      - --sort-keys
      - --monochrome-output

  - name: argocd-get-global-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP_NAME
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    outputs:
      parameters:
      - name: RESULT
        globalName: APP_RESULT
        valueFrom:
          path: /tmp/result.json
    script:
      name: app-get
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: APP_NAME
        value: "{{ inputs.parameters.APP_NAME }}"
      - name: ARGOCD_SERVER
        value: "{{ inputs.parameters.ARGOCD_SERVER }}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.TOKEN_SECRET }}"
            key: "{{ inputs.parameters.TOKEN_SECRET_KEY }}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app get ${APP_NAME} --output json > /tmp/result.json

  - name: argocd-get-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP_NAME
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          path: /tmp/result.json
    script:
      name: app-get
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: APP_NAME
        value: "{{ inputs.parameters.APP_NAME }}"
      - name: ARGOCD_SERVER
        value: "{{ inputs.parameters.ARGOCD_SERVER }}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.TOKEN_SECRET }}"
            key: "{{ inputs.parameters.TOKEN_SECRET_KEY }}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app get ${APP_NAME} --output json > /tmp/result.json

  - name: argocd-sync-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP_NAME
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: sync
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: APP_NAME
        value: "{{ inputs.parameters.APP_NAME }}"
      - name: ARGOCD_SERVER
        value: "{{ inputs.parameters.ARGOCD_SERVER }}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.TOKEN_SECRET }}"
            key: "{{ inputs.parameters.TOKEN_SECRET_KEY }}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app sync ${APP_NAME} --prune --timeout 120

  - name: argocd-wait-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP_NAME
      - name: FLAGS
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: wait
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: APP_NAME
        value: "{{ inputs.parameters.APP_NAME }}"
      - name: ARGOCD_SERVER
        value: "{{ inputs.parameters.ARGOCD_SERVER }}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.TOKEN_SECRET }}"
            key: "{{ inputs.parameters.TOKEN_SECRET_KEY }}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      - name: FLAGS
        value: "{{ inputs.parameters.FLAGS }}"
      command:
      - sh
      source: |
        argocd app wait ${APP_NAME} ${FLAGS}

  - name: fail-tmpl
    container:
      image: alpine:3.20
      command:
      - sh
      args:
      - exit 1

  - name: suspend-tmpl
    suspend: {}
