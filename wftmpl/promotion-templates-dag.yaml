apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: promotion-templates-dag
spec:
  serviceAccountName: promotion-templates
  hooks:
    exit:
      template: argocd-app-get-tmpl
      arguments:
        parameters:
        - name: ARGOCD_SERVER
          value: '{{ workflow.parameters.ARGOCD_SERVER }}'
        - name: APP
          value: '{{ workflow.parameters.APP_NAME }}'
        - name: TOKEN_SECRET
          value: argocd-token
        - name: TOKEN_SECRET_KEY
          value: token
  entrypoint: promotion
  arguments:
    parameters:
    - name: APP_NAME
    - name: APP_PROXY_SERVER
    - name: ARGOCD_SERVER
    - name: POST_ACTION_ONLY
      value: "false"
    - name: ACTION_ENDPOINT
      value: ""
    - name: ACTION_BODY
      value: ""
    - name: PRE_ACTION_TMPL
      value: ""
    - name: POST_ACTION_TMPL
      value: ""
    - name: ARGS
      value: ""
  templates:
  - name: promotion
    inputs:
      parameters:
      - name: APP_NAME
        value: "{{workflow.parameters.APP_NAME}}"
      - name: APP_PROXY_SERVER
        value: "{{workflow.parameters.APP_PROXY_SERVER}}"
      - name: ARGOCD_SERVER
        value: "{{workflow.parameters.ARGOCD_SERVER}}"
      - name: POST_ACTION_ONLY
        value: "{{workflow.parameters.POST_ACTION_ONLY}}"
      - name: ACTION_ENDPOINT
        value: "{{workflow.parameters.ACTION_ENDPOINT}}"
      - name: ACTION_BODY
        value: "{{workflow.parameters.ACTION_BODY}}"
      - name: PRE_ACTION_TMPL
        default: "{{workflow.parameters.PRE_ACTION_TMPL}}"
      - name: POST_ACTION_TMPL
        default: "{{workflow.parameters.POST_ACTION_TMPL}}"
      - name: ARGS
        default: "{{workflow.parameters.ARGS}}"
    dag:
      tasks:
      - name: terminate-running-promotions
        template: terminate-workflow-tmpl
        arguments:
          parameters:
          - name: PARENT_LABEL_SELECTOR
            value: "codefresh.io/app=={{workflow.labels.codefresh\u002eio/app}},codefresh.io/promotion-flow=={{workflow.labels.codefresh\u002eio/promotion-flow}},codefresh.io/commit-sha!={{workflow.labels.codefresh\u002eio/commit-sha}},workflows.argoproj.io/phase!=Succeeded,workflows.argoproj.io/phase!=Failed,workflows.argoproj.io/phase!=Error"
          - name: MESSAGE
            value: "terminating old promotion workflow, after starting release \"{{workflow.labels.codefresh\u002eio/release}}\""

      - name: run-action
        depends: "terminate-running-promotions"
        when: "{{= inputs.parameters.POST_ACTION_ONLY != 'true'}}"
        template: run-action-tmpl
        arguments:
          parameters:
          - name: APP_PROXY_SERVER
            value: "{{inputs.parameters.APP_PROXY_SERVER}}"
          - name: ACTION_ENDPOINT
            value: "{{inputs.parameters.ACTION_ENDPOINT}}"
          - name: ACTION_BODY
            value: "{{inputs.parameters.ACTION_BODY}}"
          - name: PRE_ACTION_TMPL
            value: "{{inputs.parameters.PRE_ACTION_TMPL}}"
          - name: ARGS
            value: "{{inputs.parameters.ARGS}}"

      - name: get-app
        depends: "run-action.Skipped || run-action.Succeeded"
        template: argocd-app-get-tmpl
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token

      - name: sync-app
        depends: "get-app"
        when: "{{= !('automated' in jsonpath(tasks['get-app'].outputs.parameters.APP_JSON, '$.spec.syncPolicy'))}}"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-sync-tmpl

      - name: wait-app
        depends: "sync-app.Succeeded"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: FLAGS
            value: --health --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

      - name: post-action
        depends: "sync-app.Skipped || wait-app.Succeeded"
        when: "{{=inputs.parameters.POST_ACTION_TMPL != ''}}"
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{inputs.parameters.POST_ACTION_TMPL}}"
          - name: ARGS
            value: "{{inputs.parameters.ARGS}}"

      - name: final-wait-app
        depends: "post-action"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: FLAGS
            value: --health --sync --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

  - name: run-action-tmpl
    inputs:
      parameters:
      - name: APP_PROXY_SERVER
        value: "{{workflow.parameters.APP_PROXY_SERVER}}"
      - name: ACTION_ENDPOINT
        value: "{{workflow.parameters.ACTION_ENDPOINT}}"
      - name: ACTION_BODY
        value: "{{workflow.parameters.ACTION_BODY}}"
      - name: PRE_ACTION_TMPL
        default: "{{workflow.parameters.PRE_ACTION_TMPL}}"
      - name: ARGS
        default: "{{workflow.parameters.ARGS}}"
    steps:
    - - name: pre-action
        when: "{{= inputs.parameters.PRE_ACTION_TMPL != ''}}"
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{inputs.parameters.PRE_ACTION_TMPL}}"
          - name: ARGS
            value: "{{inputs.parameters.ARGS}}"

    - - name: action
        when: "{{= inputs.parameters.ACTION_ENDPOINT != ''}}"
        template: action-tmpl
        arguments:
          parameters:
          - name: URL
            value: "http://{{inputs.parameters.APP_PROXY_SERVER}}/api/{{inputs.parameters.ACTION_ENDPOINT}}"
          - name: BODY
            value: "{{inputs.parameters.ACTION_BODY}}"

    - - name: suspend
        inline:
          suspend: {}

  - name: terminate-workflow-tmpl
    inputs:
      parameters:
      - name: PARENT_LABEL_SELECTOR
      - name: MESSAGE
    script:
      name: main
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      env:
      - name: LABEL_SELECTOR
        value: "{{inputs.parameters.PARENT_LABEL_SELECTOR}}"
      - name: MESSAGE
        value: "{{inputs.parameters.MESSAGE}}"
      command:
      - sh
      source: |
        echo "selector: \"${LABEL_SELECTOR}\""
        PARENT_WORKFLOWS=$(argo list \
            --selector "${LABEL_SELECTOR}" \
            --output json)
        echo ${PARENT_WORKFLOWS} | jq -c '.[].metadata' | while read i; do
            NAME=$(echo ${i} | jq -r '.name')
            ID=$(echo ${i} | jq -r '.uid')
            echo "stopping promotion-wrapper \"$NAME\""
            argo stop ${NAME} --message "${MESSAGE}"
            echo "stopping pre/post-sync promotion workflows"
            argo stop \
              --selector "codefresh.io/submit-wf-parent-uid==${ID},workflows.argoproj.io/phase!=Succeeded,workflows.argoproj.io/phase!=Failed,workflows.argoproj.io/phase!=Error" \
              --message "${MESSAGE}"
        done

        echo "done stopping workflows"

  - name: submit-workflow-tmpl
    inputs:
      parameters:
      - name: TEMPLATE_NAME
      - name: ARGS
    script:
      name: submit
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      command:
      - sh
      source: |
        echo {{inputs.parameters.ARGS}} > params.json
        argo submit \
          --from wftmpl/{{inputs.parameters.TEMPLATE_NAME}} \
          --parameter-file params.json \
          --labels codefresh.io/submit-wf-parent-uid={{workflow.uid}},codefresh.io/workflow-origin=promotion \
          --wait \
          --output=json

  - name: action-tmpl
    inputs:
      parameters:
        - name: URL
        - name: BODY
    http:
      url: "{{inputs.parameters.URL}}"
      method: "POST"
      headers:
      - name: "content-type"
        value: "application/json"
      body: "{{inputs.parameters.BODY}}"
      successCondition: "response.statusCode == 200"

  - name: argocd-sync-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: sync
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
            name: "{{inputs.parameters.TOKEN_SECRET}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source:
        argocd app sync {{inputs.parameters.APP}} --prune --timeout 120

  - name: argocd-wait-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: FLAGS
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: wait
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
            name: "{{inputs.parameters.TOKEN_SECRET}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app wait {{inputs.parameters.APP}} {{inputs.parameters.FLAGS}}

  - name: argocd-app-get-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    outputs:
      parameters:
      - name: APP_JSON
        valueFrom:
          path: /tmp/app.json
    script:
      name: app-get
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
            name: "{{inputs.parameters.TOKEN_SECRET}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app get {{inputs.parameters.APP}} -o json > /tmp/app.json
