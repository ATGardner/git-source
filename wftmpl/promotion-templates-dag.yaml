apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: promotion-templates-dag
spec:
  serviceAccountName: promotion-templates
  hooks:
    exit:
      template: argocd-app-get-tmpl
      arguments:
        parameters:
        - name: ARGOCD_SERVER
          value: '{{ workflow.parameters.ARGOCD_SERVER }}'
        - name: APP
          value: '{{ workflow.parameters.APP_NAME }}'
        - name: TOKEN_SECRET
          value: argocd-token
        - name: TOKEN_SECRET_KEY
          value: token
  entrypoint: promotion
  arguments:
    parameters:
    - name: APP_NAME
    - name: APP_PROXY_SERVER
    - name: ARGOCD_SERVER
    - name: POST_ACTION_ONLY
      value: "false"
    - name: ACTION_ENDPOINT
      value: ""
    - name: ACTION_BODY
      value: ""
    - name: PRE_ACTION_TMPL
      value: ""
    - name: POST_ACTION_TMPL
      value: ""
    - name: ARGS
      value: ""
  templates:
  - name: promotion
    inputs:
      parameters:
      - name: APP_NAME
        value: "{{workflow.parameters.APP_NAME}}"
      - name: APP_PROXY_SERVER
        value: "{{workflow.parameters.APP_PROXY_SERVER}}"
      - name: ARGOCD_SERVER
        value: "{{workflow.parameters.ARGOCD_SERVER}}"
      - name: POST_ACTION_ONLY
        value: "{{workflow.parameters.POST_ACTION_ONLY}}"
      - name: ACTION_ENDPOINT
        value: "{{workflow.parameters.ACTION_ENDPOINT}}"
      - name: ACTION_BODY
        value: "{{workflow.parameters.ACTION_BODY}}"
      - name: PRE_ACTION_TMPL
        default: "{{workflow.parameters.PRE_ACTION_TMPL}}"
      - name: POST_ACTION_TMPL
        default: "{{workflow.parameters.POST_ACTION_TMPL}}"
      - name: ARGS
        default: "{{workflow.parameters.ARGS}}"
    dag:
      tasks:
      - name: stop-running-promotions
        template: stop-workflow-tmpl
        arguments:
          parameters:
          - name: PARENT_LABEL_SELECTOR
            value: "codefresh.io/app=={{workflow.labels.codefresh\u002eio/app}},codefresh.io/promotion-flow=={{workflow.labels.codefresh\u002eio/promotion-flow}},codefresh.io/release!={{workflow.labels.codefresh\u002eio/release}},workflows.argoproj.io/phase!=Succeeded,workflows.argoproj.io/phase!=Failed,workflows.argoproj.io/phase!=Error"
          - name: MESSAGE
            value: "stopping old promotion workflow, after starting release \"{{workflow.labels.codefresh\u002eio/release}}\""

      - name: run-action
        depends: "stop-running-promotions"
        when: "{{=inputs.parameters.POST_ACTION_ONLY != 'true'}}"
        template: action-dag-tmpl
        arguments:
          parameters:
          - name: APP_PROXY_SERVER
            value: "{{inputs.parameters.APP_PROXY_SERVER}}"
          - name: ACTION_ENDPOINT
            value: "{{inputs.parameters.ACTION_ENDPOINT}}"
          - name: ACTION_BODY
            value: "{{inputs.parameters.ACTION_BODY}}"
          - name: PRE_ACTION_TMPL
            value: "{{inputs.parameters.PRE_ACTION_TMPL}}"
          - name: ARGS
            value: "{{inputs.parameters.ARGS}}"

      - name: get-app
        depends: "run-action.Skipped || run-action.Succeeded"
        template: argocd-app-get-tmpl
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token

      - name: sync-app
        depends: "get-app"
        when: "{{= !('automated' in jsonpath(tasks['get-app'].outputs.parameters.RESULT, '$.spec.syncPolicy'))}}"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-sync-tmpl

      - name: wait-app
        depends: "sync-app.Succeeded"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: FLAGS
            value: --health --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

      - name: post-action
        depends: "sync-app.Skipped || wait-app.Succeeded"
        when: "{{=inputs.parameters.POST_ACTION_TMPL != ''}}"
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{inputs.parameters.POST_ACTION_TMPL}}"
          artifacts:
          - name: ARGS
            raw:
              data: "{{tasks.run-action.outputs.parameters.RESULT}}"

      - name: final-wait-app
        depends: "post-action"
        arguments:
          parameters:
          - name: ARGOCD_SERVER
            value: "{{inputs.parameters.ARGOCD_SERVER}}"
          - name: APP
            value: "{{inputs.parameters.APP_NAME}}"
          - name: FLAGS
            value: --health --sync --timeout 120
          - name: TOKEN_SECRET
            value: argocd-token
          - name: TOKEN_SECRET_KEY
            value: token
        template: argocd-wait-tmpl

  - name: action-dag-tmpl
    inputs:
      parameters:
      - name: APP_PROXY_SERVER
      - name: ACTION_ENDPOINT
        default: ""
      - name: ACTION_BODY
        default: ""
      - name: PRE_ACTION_TMPL
        default: ""
      - name: ARGS
        default: ""
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          expression: "inputs.parameters.ACTION_ENDPOINT != '' ? tasks.action.outputs.parameters.RESPONSE : tasks.pre-action.outputs.parameters.RESULT"
    dag:
      tasks:
      - name: pre-action
        when: "{{= inputs.parameters.PRE_ACTION_TMPL != ''}}"
        template: submit-workflow-tmpl
        arguments:
          parameters:
          - name: TEMPLATE_NAME
            value: "{{inputs.parameters.PRE_ACTION_TMPL}}"
          artifacts:
          - name: ARGS
            raw:
              data: "{{inputs.parameters.ARGS}}"

      - name: action
        when: "{{= inputs.parameters.ACTION_ENDPOINT != ''}}"
        depends: "pre-action"
        template: action-tmpl
        arguments:
          parameters:
          - name: URL
            value: "http://{{inputs.parameters.APP_PROXY_SERVER}}/api/{{inputs.parameters.ACTION_ENDPOINT}}"
          artifacts:
          - name: BODY
            raw:
              data: "{{inputs.parameters.ACTION_BODY}}"

      - name: fail
        depends: "pre-action.Skipped && action.Skipped"
        template: fail-tmpl

      - name: suspend
        depends: "(pre-action.Succeeded && !action.Failed) || action.Succeeded"
        template: suspend-tmpl

  - name: stop-workflow-tmpl
    inputs:
      parameters:
      - name: PARENT_LABEL_SELECTOR
      - name: MESSAGE
    script:
      name: main
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      env:
      - name: LABEL_SELECTOR
        value: "{{inputs.parameters.PARENT_LABEL_SELECTOR}}"
      - name: MESSAGE
        value: "{{inputs.parameters.MESSAGE}}"
      command:
      - sh
      source: |
        echo "selector: ${LABEL_SELECTOR}"
        echo "message: ${MESSAGE}"
        argo stop \
          --selector "${LABEL_SELECTOR}" \
          --message "${MESSAGE}"

  - name: submit-workflow-tmpl
    inputs:
      parameters:
      - name: TEMPLATE_NAME
      artifacts:
      - name: ARGS
        path: /tmp/args.json
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          path: /tmp/result.json
    script:
      name: submit
      image: quay.io/codefreshplugins/argo-hub-argo-workflows-argo-workflow-cli:0.0.4-main
      env:
      - name: PARENT_UID
        value: "{{workflow.uid}}"
      - name: APP_LABEL
        value: "{{workflow.labels.codefresh\u002eio/app}}"
      - name: PROMOTION_FLOW_LABEL
        value: "{{workflow.labels.codefresh\u002eio/promotion-flow}}"
      - name: RELEASE_LABEL
        value: "{{workflow.labels.codefresh\u002eio/release}}"
      command:
      - sh
      source: |
        argo submit \
          --from wftmpl/{{inputs.parameters.TEMPLATE_NAME}} \
          --parameter-file /tmp/args.json \
          --labels codefresh.io/submit-wf-parent-uid=${PARENT_UID},codefresh.io/workflow-origin="promotion",codefresh.io/app=${APP_LABEL},codefresh.io/promotion-flow=${PROMOTION_FLOW_LABEL},codefresh.io/release=${RELEASE_LABEL} \
          --wait \
          --output=json > /tmp/result.json

  - name: action-tmpl
    inputs:
      parameters:
      - name: URL
      - name: TOKEN_SECRET
        value: codefresh-token
      - name: TOKEN_SECRET_KEY
        value: token
      artifacts:
      - name: BODY
        path: /tmp/body.json
    outputs:
      parameters:
      - name: RESPONSE
        valueFrom:
          path: /tmp/response.json
    script:
      name: curl
      image: quay.io/curl/curl-base:8.6.0
      env:
      - name: URL
        value: "{{inputs.parameters.URL}}"
      - name: TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{inputs.parameters.TOKEN_SECRET}}"
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
      command:
      - sh
      source: |
        echo "" > /tmp/response.json
        STATUS_CODE=$(curl ${URL} \
          --header "Content-Type: application/json" \
          --header "Authorization: ${TOKEN}" \
          --data @/tmp/body.json \
          --silent \
          --output /tmp/response.json \
          --write-out "%{http_code}")
        EXIT_CODE=$?
        if [[ ${EXIT_CODE} -ne 0 ]]; then
          echo "curl command failed!"
          exit ${EXIT_CODE}
        fi

        if [[ $STATUS_CODE == 000 ]]; then
          echo "error sending request to app-proxy"
          exit 1
        fi

        if [[ $STATUS_CODE -ge 300 ]]; then
          echo "error performing action in app-proxy, STATUS_CODE: ${STATUS_CODE}"
          exit $STATUS_CODE
        fi

  - name: argocd-sync-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: sync
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{inputs.parameters.TOKEN_SECRET}}"
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source:
        argocd app sync {{inputs.parameters.APP}} --prune --timeout 120

  - name: argocd-wait-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: FLAGS
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    script:
      name: wait
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{inputs.parameters.TOKEN_SECRET}}"
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app wait {{inputs.parameters.APP}} {{inputs.parameters.FLAGS}}

  - name: argocd-app-get-tmpl
    inputs:
      parameters:
      - name: ARGOCD_SERVER
      - name: APP
      - name: TOKEN_SECRET
        default: argocd-token
      - name: TOKEN_SECRET_KEY
        default: token
    outputs:
      parameters:
      - name: RESULT
        valueFrom:
          path: /tmp/result.json
    script:
      name: app-get
      image: quay.io/codefreshplugins/argo-hub-workflows-argocd-versions-0.0.1-images-argocd-cli:main
      env:
      - name: ARGOCD_SERVER
        value: "{{inputs.parameters.ARGOCD_SERVER}}"
      - name: ARGOCD_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: "{{inputs.parameters.TOKEN_SECRET}}"
            key: "{{inputs.parameters.TOKEN_SECRET_KEY}}"
      - name: ARGOCD_OPTS
        value: --grpc-web --plaintext
      command:
      - sh
      source: |
        argocd app get {{inputs.parameters.APP}} -o json > /tmp/result.json

  - name: fail-tmpl
    container:
      image: alpine:latest
      command:
      - sh
      - -c
      args:
      - exit 1

  - name: suspend-tmpl
    suspend: {}
